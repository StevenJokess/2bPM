
ML `1 <https://www.pianshen.com/article/66921228716/>`__
========================================================

第一类是构造间隔理论分布：聚类分析和模式识别

-  人工神经网络
-  决策树
-  感知器
-  支持向量机
-  集成学习AdaBoost
-  降维与度量学习
-  聚类
-  贝叶斯分类器

第二类是构造条件概率：回归分析和统计分类

-  高斯过程回归
-  线性判别分析
-  最近邻居法
-  径向基函数核

第三类是通过再生模型构造概率密度函数

-  最大期望算法
-  概率图模型：包括贝叶斯网和Markov随机场
-  Generative Topographic Mapping

第四类是近似推断技术

-  马尔可夫链
-  蒙特卡罗方法
-  变分法

.. figure:: ../img/ML.png

   ML\ `3 <http://www.uml.org.cn/devprocess/201910163.asp>`__

选择
----

在具体算法选择上，基于Python的scikit-learn机器学习算法库提供一套算法选择方法，参考这一部分（不局限于图中的算法和方法，由于这张图大多考虑了scikit中算法的实现情况）具体介绍一下算法的选择如下：
`4 <https://zhuanlan.zhihu.com/p/36870462>`__

1. 首先统计数据的容量当数据过小（小于50条）时，建议收集更多的数据，因为过小的数据训练的算法容易受噪声的影响比较大，算法效果一般。
2. 判断是否为预测一个类别的问题，如果是并且训练数据中包含标签信息则为分类问题。
3. 如果是预测一个类别的问题但是训练数据中不包含标签信息则是一个聚类问题
4. 如果不是一个分类问题，是预测一个具体的数值问题一般为回归问题，如果不是预测具体数值对数据进行分析，挖掘数据中的异常值等问题，这时可以考虑一下是否为降维问题。
5. 对于分类问题，如果数据量小于100k,建议用线性SVM的方法，如果效果不好根据是否为文本信息考虑用贝叶斯方法或者K临近分类法。如果数据量过大可以考虑加入正则化的方法来防止过拟合的问题来保证模型的稳定性。
6. 对于聚类问题，如果我们知道需要划分的数据集个数一般使用Kmeans等聚类方法即可。如果无法获知聚类的个数一般使用mean-shift的基于密度的算法可以对模型进行聚类评估，
7. 对于回归问题，如果数据量不大，直接使用SVM之类的回归即可，当然如果数据量过大可以考虑使用L1，L2的正则化方法来对权值进行正则化来防止过拟合问题的出现。这部分算法的选择与分类问题很相似。
8. 对于降维问题，如果是考虑为分类问题的输入维度进行削减，一般考虑LDA方法可以很好的对每个类别上的数据进行降维处理。如果单纯对输入维度进行降维，将原有维度信息转移到新的维度（根据维度的正交化来达到降维的目的）一般使用PCA方法是比较主流的方法。

对于算法的选择，有时不能找到确定的方法，也就是说很难根据数据是使用场景就完全锁定了那一个具体的算法，但是根据却可以缩小到指定的几个常用算法。然后通过测试集和训练集在这几个算法上做一些Demo。根据Demo反应的质量决定最终使用的算法那个。看似比较费力，其实是比较稳妥和精准的方法。

更多
----

https://mitpress.ublish.com/ereader/7093/?preview=#page/v

1. https://www.jianshu.com/p/ed9ae5385b89
2. https://www.jianshu.com/p/0359e3b7bb1b

至少你要知道什么是二分类问题，什么是ground
truth、熵（entropy）的概念，dynamic
learning的概念等等。\ `2 <http://www.uml.org.cn/DevProcess/201712283.asp>`__

https://www.reddit.com/r/MachineLearning/
